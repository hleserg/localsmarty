#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
–†–∞–±–æ—Ç–∞–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from utils.logger import log_message, log_response, log_info, log_error

class SimpleBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.running = False
        
    async def simulate_telegram_messages(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
        log_info("ü§ñ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        log_info("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ")
        log_info("üí¨ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å Telegram API")
        
        self.running = True
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = [
            {
                "chat_id": 111111111,
                "user_id": 222222222,
                "username": "alice",
                "message_type": "COMMAND",
                "content": "/start",
                "message_id": 101
            },
            {
                "chat_id": 111111111,
                "user_id": 222222222,
                "username": "alice",
                "message_type": "TEXT",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "message_id": 102
            },
            {
                "chat_id": 333333333,
                "user_id": 444444444,
                "username": "bob",
                "message_type": "TEXT",
                "content": "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
                "message_id": 201
            },
            {
                "chat_id": 555555555,
                "user_id": 666666666,
                "username": "charlie",
                "message_type": "VOICE",
                "content": "Voice message, duration: 4s, file_id: voice_abc123",
                "message_id": 301
            },
            {
                "chat_id": 111111111,
                "user_id": 222222222,
                "username": "alice",
                "message_type": "COMMAND",
                "content": "/help",
                "message_id": 103
            }
        ]
        
        print("\n" + "="*70)
        print("üì± –ò–ú–ò–¢–ê–¶–ò–Ø –†–ê–ë–û–¢–´ TELEGRAM –ë–û–¢–ê")
        print("="*70)
        
        for i, msg in enumerate(messages, 1):
            if not self.running:
                break
                
            print(f"\nüì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}:")
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{msg['username']} (ID: {msg['user_id']})")
            print(f"   üí¨ –¢–∏–ø: {msg['message_type']}")
            print(f"   üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {msg['content'][:50]}...")
            print(f"   üÜî Chat ID: {msg['chat_id']}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            log_message(**msg)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(1)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.generate_response(msg)
            print(f"   ü§ñ –û—Ç–≤–µ—Ç: {response[:50]}...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            log_response(msg['chat_id'], "TEXT", True)
            
            await asyncio.sleep(2)
        
        print("\n" + "="*70)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –ë–û–¢–ê")
        print("="*70)
        print(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 3")
        print(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 2")
        print(f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 1")
        print(f"‚ö° –ö–æ–º–∞–Ω–¥: 2")
        
        print("\nüìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print("   üìÑ logs/messages.log - –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("   üìÑ logs/combined.log - –æ–±—â–∏–µ –ª–æ–≥–∏")
        print("   üìÑ logs/error.log - –æ—à–∏–±–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö:")
        try:
            with open("logs/messages.log", "r", encoding="utf-8") as f:
                lines = f.readlines()
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                message_lines = [line for line in lines if "TYPE:" in line]
                for line in message_lines[-3:]:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if "CHAT:" in line:
                        parts = line.split("CHAT:")
                        if len(parts) > 1:
                            chat_info = parts[1].split("CONTENT:")[0].strip()
                            content = parts[1].split("CONTENT:")[1].strip()[:30]
                            print(f"   üìù {chat_info} - {content}...")
        except FileNotFoundError:
            print("   –õ–æ–≥–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        print("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å Telegram API:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Yandex Cloud API")
        print("   3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª .env —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_local.py")

    def generate_response(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if message["message_type"] == "COMMAND":
            if message["content"] == "/start":
                return "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π YandexGPT. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
            elif message["content"] == "/help":
                return "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /ping. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç!"
            else:
                return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        
        elif message["message_type"] == "TEXT":
            return f"ü§ñ –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message['content']}'. –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º!"
        
        elif message["message_type"] == "VOICE":
            return "üé§ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –±—ã –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª."
        
        else:
            return "ü§ñ –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞."

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞")
    print("üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ logs/")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    bot = SimpleBot()
    
    try:
        await bot.simulate_telegram_messages()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
