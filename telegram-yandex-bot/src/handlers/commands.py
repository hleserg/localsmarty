import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode, ChatAction
from utils.markdown import transform_to_markdown_v2
from services.neuroapi_client import get_gpt_response
from config import config
from telegram.error import BadRequest
from utils.logger import log_message, log_response

logger = logging.getLogger(__name__)


async def _send_typing_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç' –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.effective_chat:
        logger.warning("Cannot send typing status: missing message or chat")
        return
    try:
        logger.info(f"Sending typing status to chat {update.effective_chat.id}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        logger.info(f"Typing status sent successfully to chat {update.effective_chat.id}")
    except Exception as e:
        logger.error(f"Failed to send typing status: {e}")


async def _send_business_typing_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç' –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.business_message or not update.effective_chat:
        logger.warning("Cannot send business typing status: missing business_message or chat")
        return
    try:
        logger.info(f"Sending business typing status to chat {update.effective_chat.id}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        logger.info(f"Business typing status sent successfully to chat {update.effective_chat.id}")
    except Exception as e:
        logger.error(f"Failed to send business typing status: {e}")


async def _reply_md_v2_safe(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, disable_preview: bool = True) -> None:
    """Reply with MarkdownV2; on BadRequest fallback to plain text."""
    if not update.message or not update.effective_chat:
        return
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=transform_to_markdown_v2(text),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=disable_preview,
        )
    except BadRequest as e:
        # Fallback to plain text if MarkdownV2 fails
        logging.getLogger(__name__).warning(f"MarkdownV2 failed, fallback to plain: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            disable_web_page_preview=disable_preview,
        )

async def _reply_business_md_v2_safe(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, disable_preview: bool = True) -> None:
    """Reply to business message with MarkdownV2; on BadRequest fallback to plain text."""
    if not update.business_message or not update.effective_chat:
        return
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=transform_to_markdown_v2(text),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=disable_preview,
            business_connection_id=update.business_message.business_connection_id
        )
    except BadRequest as e:
        # Fallback to plain text if MarkdownV2 fails
        logging.getLogger(__name__).warning(f"MarkdownV2 failed for business message, fallback to plain: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            disable_web_page_preview=disable_preview,
            business_connection_id=update.business_message.business_connection_id
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /start command"""
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    log_message(
        chat_id=update.effective_chat.id,
        user_id=update.effective_user.id,
        username=update.effective_user.username,
        message_type="COMMAND",
        content="/start",
        message_id=update.message.message_id
    )
    
    welcome_message = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GPT-5 —á–µ—Ä–µ–∑ NeuroAPI.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {'–≤–∫–ª—é—á–µ–Ω' if config.ENABLE_CONTEXT else '–æ—Ç–∫–ª—é—á–µ–Ω'}\n"
        f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {'–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if config.ENABLE_VOICE else '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    
    try:
        await _reply_md_v2_safe(update, context, welcome_message)
        log_response(update.effective_chat.id, "TEXT", True)
    except Exception as e:
        log_response(update.effective_chat.id, "TEXT", False, str(e))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /help command"""
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    log_message(
        chat_id=update.effective_chat.id,
        user_id=update.effective_user.id,
        username=update.effective_user.username,
        message_type="COMMAND",
        content="/help",
        message_id=update.message.message_id
    )
    
    help_text = (
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
        "üí¨ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT-5.\n"
    )
    
    if config.ENABLE_VOICE:
        help_text += "\nüé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É."
    
    if config.ENABLE_CONTEXT:
        help_text += "\nüß† *–ö–æ–Ω—Ç–µ–∫—Å—Ç:*\n–Ø –ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."
    
    try:
        await _reply_md_v2_safe(update, context, help_text)
        log_response(update.effective_chat.id, "TEXT", True)
    except Exception as e:
        log_response(update.effective_chat.id, "TEXT", False, str(e))

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /ping command - bot health check"""
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    log_message(
        chat_id=update.effective_chat.id,
        user_id=update.effective_user.id,
        username=update.effective_user.username,
        message_type="COMMAND",
        content="/ping",
        message_id=update.message.message_id
    )
    
    ping_message = (
        "üèì Pong!\n"
        f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n"
        f"–í–µ—Ä—Å–∏—è: 1.0.0\n"
        f"NeuroAPI GPT-5: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if config.NEUROAPI_API_KEY else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ –≤–∫–ª—é—á–µ–Ω—ã' if config.ENABLE_VOICE else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã'}"
    )
    
    try:
        await _reply_md_v2_safe(update, context, ping_message)
        log_response(update.effective_chat.id, "TEXT", True)
    except Exception as e:
        log_response(update.effective_chat.id, "TEXT", False, str(e))

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for text messages (both regular and business messages)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ business_message
    if update.business_message:
        await handle_business_message(update, context)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    
    user_message = update.message.text or ""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.username
    message_id = update.message.message_id

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_message(
        chat_id=chat_id,
        user_id=user_id,
        username=username,
        message_type="TEXT",
        content=user_message,
        message_id=message_id
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        logger.info(f"Processing text message from chat {chat_id}: {user_message[:50]}...")
        await _send_typing_status(update, context)
        
        # Get response from NeuroAPI GPT-5
        gpt_response = get_gpt_response(user_message, chat_id)
        await _reply_md_v2_safe(update, context, gpt_response)
        log_response(chat_id, "TEXT", True)
    except Exception as e:
        logger.error(f"Error handling text message for chat {chat_id}: {str(e)}")
        log_response(chat_id, "TEXT", False, str(e))
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as reply_error:
            logger.error(f"Error sending error reply: {reply_error}")

async def handle_business_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for business messages"""
    logger.info("handle_business_message called")
    
    if not update.business_message:
        logger.warning("No business_message in update")
        return
        
    if not update.effective_chat:
        logger.warning("No effective_chat in update")
        return
        
    if not update.effective_user:
        logger.warning("No effective_user in update")
        return
    
    user_message = update.business_message.text or ""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.username
    message_id = update.business_message.message_id
    business_connection_id = update.business_message.business_connection_id

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
    log_message(
        chat_id=chat_id,
        user_id=user_id,
        username=username,
        message_type="BUSINESS_MESSAGE",
        content=user_message,
        message_id=message_id
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        logger.info(f"Processing business message from chat {chat_id}: {user_message[:50]}...")
        await _send_business_typing_status(update, context)
        
        # Get response from NeuroAPI GPT-5 with business context and connection ID
        gpt_response = get_gpt_response(user_message, chat_id, is_business_message=True, business_connection_id=business_connection_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∏–∑–Ω–µ—Å-—á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MarkdownV2
        await _reply_business_md_v2_safe(update, context, gpt_response)
        
        log_response(chat_id, "BUSINESS_MESSAGE", True)
    except Exception as e:
        logger.error(f"Error handling business message for chat {chat_id}: {str(e)}")
        log_response(chat_id, "BUSINESS_MESSAGE", False, str(e))
        
        try:
            await _reply_business_md_v2_safe(update, context, "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –°–µ—Ä–≥–µ—è. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ –°–µ—Ä–≥–µ–π –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç.")
        except Exception as reply_error:
            logger.error(f"Error sending error reply for business message: {reply_error}")