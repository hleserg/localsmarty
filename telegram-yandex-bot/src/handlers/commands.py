import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from utils.markdown import transform_to_markdown_v2
from services.yandex_client import get_gpt_response
from config import config
from telegram.error import BadRequest

logger = logging.getLogger(__name__)


async def _reply_md_v2_safe(update: Update, text: str, disable_preview: bool = True) -> None:
    """Reply with MarkdownV2; on BadRequest fallback to plain text."""
    if not update.message:
        return
    try:
        await update.message.reply_text(
            transform_to_markdown_v2(text),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=disable_preview,
        )
    except BadRequest as e:
        # Fallback to plain text if MarkdownV2 fails
        logging.getLogger(__name__).warning(f"MarkdownV2 failed, fallback to plain: {e}")
        await update.message.reply_text(text, disable_web_page_preview=disable_preview)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /start command"""
    welcome_message = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π YandexGPT.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {'–≤–∫–ª—é—á–µ–Ω' if config.ENABLE_CONTEXT else '–æ—Ç–∫–ª—é—á–µ–Ω'}\n"
        f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {'–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if config.ENABLE_VOICE else '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    if update.message:
        await _reply_md_v2_safe(update, welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /help command"""
    help_text = (
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
        "üí¨ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é YandexGPT.\n"
    )
    
    if config.ENABLE_VOICE:
        help_text += "\nüé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É."
    
    if config.ENABLE_CONTEXT:
        help_text += "\nüß† *–ö–æ–Ω—Ç–µ–∫—Å—Ç:*\n–Ø –ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."
    
    if update.message:
        await _reply_md_v2_safe(update, help_text)

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /ping command - bot health check"""
    ping_message = (
        "üèì Pong!\n"
        f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n"
        f"–í–µ—Ä—Å–∏—è: 1.0.0\n"
        f"YandexGPT: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if config.YC_FOLDER_ID and (config.YC_API_KEY or config.YC_IAM_TOKEN or config.YC_SA_KEY_FILE or config.YC_SA_KEY_JSON) else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ –≤–∫–ª—é—á–µ–Ω—ã' if config.ENABLE_VOICE else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã'}"
    )
    if update.message:
        await _reply_md_v2_safe(update, ping_message)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for regular text messages"""
    if not update.message:
        return
    user_message = update.message.text or ""
    chat_id = update.effective_chat.id if update.effective_chat else 0

    logger.info(f"Received text message from chat {chat_id}: {user_message[:50]}...")

    try:
        # Get response from YandexGPT
        gpt_response = get_gpt_response(user_message, chat_id)
        await _reply_md_v2_safe(update, gpt_response)
        logger.info(f"Sent response to chat {chat_id}")
    except Exception as e:
        logger.error(f"Error handling text message for chat {chat_id}: {str(e)}")
        await _reply_md_v2_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")