#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from utils.logger import log_message, log_response, log_info, log_error

class DemoBot:
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.running = False
        self.message_count = 0
        self.users = {}
        
    async def simulate_real_telegram_workflow(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Telegram –±–æ—Ç–∞"""
        log_info("ü§ñ –î–µ–º–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        log_info("üìù –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ")
        log_info("üí¨ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        self.running = True
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        scenarios = [
            {
                "name": "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "messages": [
                    {
                        "chat_id": 100000001,
                        "user_id": 200000001,
                        "username": "new_user",
                        "message_type": "COMMAND",
                        "content": "/start",
                        "message_id": 1
                    },
                    {
                        "chat_id": 100000001,
                        "user_id": 200000001,
                        "username": "new_user",
                        "message_type": "TEXT",
                        "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–¥–µ—Å—å",
                        "message_id": 2
                    }
                ]
            },
            {
                "name": "–û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥",
                "messages": [
                    {
                        "chat_id": 100000002,
                        "user_id": 200000002,
                        "username": "regular_user",
                        "message_type": "TEXT",
                        "content": "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                        "message_id": 3
                    },
                    {
                        "chat_id": 100000002,
                        "user_id": 200000002,
                        "username": "regular_user",
                        "message_type": "TEXT",
                        "content": "–ê —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –ø—Ä–æ –±—É–¥—É—â–µ–µ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏?",
                        "message_id": 4
                    }
                ]
            },
            {
                "name": "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "messages": [
                    {
                        "chat_id": 100000003,
                        "user_id": 200000003,
                        "username": "voice_user",
                        "message_type": "VOICE",
                        "content": "Voice message, duration: 3s, file_id: voice_msg_001",
                        "message_id": 5
                    },
                    {
                        "chat_id": 100000003,
                        "user_id": 200000003,
                        "username": "voice_user",
                        "message_type": "TEXT",
                        "content": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!",
                        "message_id": 6
                    }
                ]
            },
            {
                "name": "–ö–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏",
                "messages": [
                    {
                        "chat_id": 100000004,
                        "user_id": 200000004,
                        "username": "help_user",
                        "message_type": "COMMAND",
                        "content": "/help",
                        "message_id": 7
                    },
                    {
                        "chat_id": 100000004,
                        "user_id": 200000004,
                        "username": "help_user",
                        "message_type": "COMMAND",
                        "content": "/ping",
                        "message_id": 8
                    }
                ]
            }
        ]
        
        print("\n" + "="*80)
        print("üöÄ –î–ï–ú–û-–ë–û–¢: –ò–ú–ò–¢–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –†–ê–ë–û–ß–ï–ì–û –ü–†–û–¶–ï–°–°–ê")
        print("="*80)
        
        total_messages = 0
        unique_users = set()
        
        for scenario in scenarios:
            print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
            print("-" * 50)
            
            for msg in scenario['messages']:
                if not self.running:
                    break
                    
                total_messages += 1
                unique_users.add(msg['user_id'])
                
                print(f"\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ {total_messages}:")
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{msg['username']} (ID: {msg['user_id']})")
                print(f"   üí¨ –¢–∏–ø: {msg['message_type']}")
                print(f"   üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {msg['content'][:50]}...")
                print(f"   üÜî Chat ID: {msg['chat_id']}")
                print(f"   üÜî Message ID: {msg['message_id']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                log_message(**msg)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                await asyncio.sleep(0.3)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = self.generate_smart_response(msg)
                print(f"   ü§ñ –û—Ç–≤–µ—Ç: {response[:50]}...")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                log_response(msg['chat_id'], "TEXT", True)
                
                await asyncio.sleep(0.5)
        
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û-–ë–û–¢–ê")
        print("="*80)
        print(f"üì® –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}")
        print(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(1 for s in scenarios for m in s['messages'] if m['message_type'] == 'TEXT')}")
        print(f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(1 for s in scenarios for m in s['messages'] if m['message_type'] == 'VOICE')}")
        print(f"‚ö° –ö–æ–º–∞–Ω–¥: {sum(1 for s in scenarios for m in s['messages'] if m['message_type'] == 'COMMAND')}")
        print(f"üìÅ –õ–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: 3 —Ñ–∞–π–ª–∞")
        print(f"‚úÖ –û—à–∏–±–æ–∫: 0")
        
        print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–æ–≤:")
        print("   üìÑ logs/messages.log - –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("   üìÑ logs/combined.log - –æ–±—â–∏–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("   üìÑ logs/error.log - –ª–æ–≥–∏ –æ—à–∏–±–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö:")
        try:
            with open("logs/messages.log", "r", encoding="utf-8") as f:
                lines = f.readlines()
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                message_lines = [line for line in lines if "TYPE:" in line]
                for line in message_lines[-5:]:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if "CHAT:" in line:
                        parts = line.split("CHAT:")
                        if len(parts) > 1:
                            chat_info = parts[1].split("CONTENT:")[0].strip()
                            content = parts[1].split("CONTENT:")[1].strip()[:40]
                            print(f"   üìù {chat_info} - {content}...")
        except FileNotFoundError:
            print("   –õ–æ–≥–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        print("\n‚ú® –î–µ–º–æ-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
        print("üí° –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É —Å Telegram API")

    def generate_smart_response(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if message["message_type"] == "COMMAND":
            if message["content"] == "/start":
                return "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –¥–µ–º–æ-–±–æ—Ç —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è!"
            elif message["content"] == "/help":
                return "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /ping. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è!"
            elif message["content"] == "/ping":
                return "üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!"
            else:
                return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        
        elif message["message_type"] == "TEXT":
            if "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in message["content"].lower():
                return "üß† –ò–ò - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–∞! –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –±—ã –¥–∞–ª –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ YandexGPT."
            elif "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞" in message["content"].lower():
                return "ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ! –ë—É–¥—É—â–µ–µ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–∏–º."
            elif "—Å–ø–∞—Å–∏–±–æ" in message["content"].lower():
                return "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã!"
            else:
                return f"üí¨ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message['content'][:30]}...'. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ YandexGPT!"
        
        elif message["message_type"] == "VOICE":
            return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –±—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–µ—á—å —á–µ—Ä–µ–∑ SpeechKit."
        
        else:
            return "ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ!"

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ Telegram –±–æ—Ç–∞")
    print("üìù –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("üí¨ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    print("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ logs/")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    bot = DemoBot()
    
    try:
        await bot.simulate_real_telegram_workflow()
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ-–±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
