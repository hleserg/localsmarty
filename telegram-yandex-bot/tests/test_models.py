"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö.
"""
import pytest
import sys
import os
from pydantic import ValidationError

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../src'))

from models.messages import UserMessage, BotResponse, ErrorMessage


@pytest.mark.models
class TestModels:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""

    def test_user_message_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è UserMessage"""
        user_msg = UserMessage(user_id="123", text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        assert user_msg.user_id == "123"
        assert user_msg.text == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    def test_user_message_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UserMessage"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_msg = UserMessage(user_id="123", text="–¢–µ—Å—Ç")
        assert user_msg.user_id == "123"
        assert user_msg.text == "–¢–µ—Å—Ç"
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        with pytest.raises(ValidationError):
            UserMessage(user_id="123")  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç text
        
        with pytest.raises(ValidationError):
            UserMessage(text="–¢–µ—Å—Ç")  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id

    def test_user_message_empty_text(self):
        """–¢–µ—Å—Ç UserMessage —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        user_msg = UserMessage(user_id="123", text="")
        assert user_msg.text == ""

    def test_user_message_long_text(self):
        """–¢–µ—Å—Ç UserMessage —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        long_text = "A" * 1000
        user_msg = UserMessage(user_id="123", text=long_text)
        assert user_msg.text == long_text

    def test_user_message_unicode_text(self):
        """–¢–µ—Å—Ç UserMessage —Å Unicode —Ç–µ–∫—Å—Ç–æ–º"""
        unicode_text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç –¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòä"
        user_msg = UserMessage(user_id="123", text=unicode_text)
        assert user_msg.text == unicode_text

    def test_bot_response_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è BotResponse"""
        bot_resp = BotResponse(response_text="–û—Ç–≤–µ—Ç –±–æ—Ç–∞")
        
        assert bot_resp.response_text == "–û—Ç–≤–µ—Ç –±–æ—Ç–∞"
        assert bot_resp.is_typing is False  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def test_bot_response_with_typing(self):
        """–¢–µ—Å—Ç BotResponse —Å typing —Å—Ç–∞—Ç—É—Å–æ–º"""
        bot_resp = BotResponse(response_text="–û—Ç–≤–µ—Ç", is_typing=True)
        
        assert bot_resp.response_text == "–û—Ç–≤–µ—Ç"
        assert bot_resp.is_typing is True

    def test_bot_response_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ BotResponse"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        bot_resp = BotResponse(response_text="–¢–µ—Å—Ç")
        assert bot_resp.response_text == "–¢–µ—Å—Ç"
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        with pytest.raises(ValidationError):
            BotResponse()  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç response_text

    def test_bot_response_empty_text(self):
        """–¢–µ—Å—Ç BotResponse —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        bot_resp = BotResponse(response_text="")
        assert bot_resp.response_text == ""

    def test_bot_response_long_text(self):
        """–¢–µ—Å—Ç BotResponse —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        long_text = "A" * 5000
        bot_resp = BotResponse(response_text=long_text)
        assert bot_resp.response_text == long_text

    def test_bot_response_unicode_text(self):
        """–¢–µ—Å—Ç BotResponse —Å Unicode —Ç–µ–∫—Å—Ç–æ–º"""
        unicode_text = "–û—Ç–≤–µ—Ç: –ü—Ä–∏–≤–µ—Ç! üåü –ö–∞–∫ –¥–µ–ª–∞? üòä"
        bot_resp = BotResponse(response_text=unicode_text)
        assert bot_resp.response_text == unicode_text

    def test_error_message_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ErrorMessage"""
        error_msg = ErrorMessage(error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", code=500)
        
        assert error_msg.error == "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        assert error_msg.code == 500

    def test_error_message_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ErrorMessage"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        error_msg = ErrorMessage(error="–¢–µ—Å—Ç", code=400)
        assert error_msg.error == "–¢–µ—Å—Ç"
        assert error_msg.code == 400
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        with pytest.raises(ValidationError):
            ErrorMessage(code=500)  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç error
        
        with pytest.raises(ValidationError):
            ErrorMessage(error="–¢–µ—Å—Ç")  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç code

    def test_error_message_different_codes(self):
        """–¢–µ—Å—Ç ErrorMessage —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –æ—à–∏–±–æ–∫"""
        # HTTP –∫–æ–¥—ã –æ—à–∏–±–æ–∫
        error_400 = ErrorMessage(error="Bad Request", code=400)
        error_401 = ErrorMessage(error="Unauthorized", code=401)
        error_403 = ErrorMessage(error="Forbidden", code=403)
        error_404 = ErrorMessage(error="Not Found", code=404)
        error_500 = ErrorMessage(error="Internal Server Error", code=500)
        
        assert error_400.code == 400
        assert error_401.code == 401
        assert error_403.code == 403
        assert error_404.code == 404
        assert error_500.code == 500

    def test_error_message_empty_error(self):
        """–¢–µ—Å—Ç ErrorMessage —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
        error_msg = ErrorMessage(error="", code=500)
        assert error_msg.error == ""

    def test_error_message_unicode_error(self):
        """–¢–µ—Å—Ç ErrorMessage —Å Unicode —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
        unicode_error = "–û—à–∏–±–∫–∞: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π üö´"
        error_msg = ErrorMessage(error=unicode_error, code=500)
        assert error_msg.error == unicode_error

    def test_models_json_serialization(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ JSON"""
        user_msg = UserMessage(user_id="123", text="–¢–µ—Å—Ç")
        bot_resp = BotResponse(response_text="–û—Ç–≤–µ—Ç", is_typing=True)
        error_msg = ErrorMessage(error="–û—à–∏–±–∫–∞", code=500)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON
        user_json = user_msg.model_dump()
        bot_json = bot_resp.model_dump()
        error_json = error_msg.model_dump()
        
        assert user_json["user_id"] == "123"
        assert user_json["text"] == "–¢–µ—Å—Ç"
        
        assert bot_json["response_text"] == "–û—Ç–≤–µ—Ç"
        assert bot_json["is_typing"] is True
        
        assert error_json["error"] == "–û—à–∏–±–∫–∞"
        assert error_json["code"] == 500

    def test_models_json_deserialization(self):
        """–¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –∏–∑ JSON"""
        user_data = {"user_id": "456", "text": "–¢–µ—Å—Ç –∏–∑ JSON"}
        bot_data = {"response_text": "–û—Ç–≤–µ—Ç –∏–∑ JSON", "is_typing": False}
        error_data = {"error": "–û—à–∏–±–∫–∞ –∏–∑ JSON", "code": 404}
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        user_msg = UserMessage(**user_data)
        bot_resp = BotResponse(**bot_data)
        error_msg = ErrorMessage(**error_data)
        
        assert user_msg.user_id == "456"
        assert user_msg.text == "–¢–µ—Å—Ç –∏–∑ JSON"
        
        assert bot_resp.response_text == "–û—Ç–≤–µ—Ç –∏–∑ JSON"
        assert bot_resp.is_typing is False
        
        assert error_msg.error == "–û—à–∏–±–∫–∞ –∏–∑ JSON"
        assert error_msg.code == 404

    def test_models_type_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
        with pytest.raises(ValidationError):
            ErrorMessage(error="–¢–µ—Å—Ç", code="–Ω–µ_—á–∏—Å–ª–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ is_typing –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        with pytest.raises(ValidationError):
            BotResponse(response_text="–¢–µ—Å—Ç", is_typing="–Ω–µ_–±—É–ª–µ–≤–æ")

    def test_models_field_types(self):
        """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–µ–π"""
        user_msg = UserMessage(user_id="123", text="–¢–µ—Å—Ç")
        bot_resp = BotResponse(response_text="–û—Ç–≤–µ—Ç", is_typing=True)
        error_msg = ErrorMessage(error="–û—à–∏–±–∫–∞", code=500)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
        assert isinstance(user_msg.user_id, str)
        assert isinstance(user_msg.text, str)
        
        assert isinstance(bot_resp.response_text, str)
        assert isinstance(bot_resp.is_typing, bool)
        
        assert isinstance(error_msg.error, str)
        assert isinstance(error_msg.code, int)

    def test_models_immutability(self):
        """–¢–µ—Å—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        user_msg = UserMessage(user_id="123", text="–¢–µ—Å—Ç")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
        with pytest.raises(ValidationError):
            user_msg.user_id = "456"

    def test_models_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        user_msg = UserMessage(user_id="123", text="–¢–µ—Å—Ç")
        bot_resp = BotResponse(response_text="–û—Ç–≤–µ—Ç", is_typing=True)
        error_msg = ErrorMessage(error="–û—à–∏–±–∫–∞", code=500)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        assert str(user_msg) is not None
        assert str(bot_resp) is not None
        assert str(error_msg) is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        assert "123" in str(user_msg)
        assert "–û—Ç–≤–µ—Ç" in str(bot_resp)
        assert "–û—à–∏–±–∫–∞" in str(error_msg)

