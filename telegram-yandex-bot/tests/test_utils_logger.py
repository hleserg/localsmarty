"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —É—Ç–∏–ª–∏—Ç –ª–æ–≥–≥–µ—Ä–∞.
"""
import pytest
import sys
import os
import tempfile
import json
from datetime import datetime
from unittest.mock import patch, mock_open, call
from io import StringIO

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../src'))

from utils.logger import log_info, log_error, log_message, log_response, log_update_json


@pytest.mark.utils
class TestLoggerUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def test_log_info_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        with patch('utils.logger.logger') as mock_logger:
            log_info("Test info message")
            mock_logger.info.assert_called_once_with("Test info message")

    def test_log_error_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        with patch('utils.logger.logger') as mock_logger:
            log_error("Test error message")
            mock_logger.error.assert_called_once_with("Test error message")

    def test_log_message_basic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print') as mock_print:
            
            log_message(
                chat_id=12345,
                user_id=67890,
                username="testuser",
                message_type="TEXT",
                content="Hello world",
                message_id=1
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–≥–µ—Ä –±—ã–ª –≤—ã–∑–≤–∞–Ω
            assert mock_logger.info.called
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ print –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            assert mock_print.called

    def test_log_message_without_username(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print') as mock_print:
            
            log_message(
                chat_id=12345,
                user_id=67890,
                username=None,
                message_type="TEXT",
                content="Hello world",
                message_id=1
            )
            
            assert mock_logger.info.called
            assert mock_print.called

    def test_log_message_long_content(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–ª–∏–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print') as mock_print:
            
            long_content = "A" * 300  # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            log_message(
                chat_id=12345,
                user_id=67890,
                username="testuser",
                message_type="TEXT",
                content=long_content,
                message_id=1
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
            logged_content = mock_logger.info.call_args[0][0]
            assert len(logged_content.split("CONTENT:")[1]) <= 200

    def test_log_message_console_output(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        with patch('utils.logger.logger'), \
             patch('utils.logger.print') as mock_print:
            
            log_message(
                chat_id=12345,
                user_id=67890,
                username="testuser",
                message_type="TEXT",
                content="Hello world",
                message_id=1
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–æ–≤ print —Å —ç–º–æ–¥–∑–∏
            print_calls = mock_print.call_args_list
            assert any("üí¨" in str(call) for call in print_calls)

    def test_log_response_success(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print') as mock_print:
            
            log_response(chat_id=12345, response_type="TEXT", success=True)
            
            assert mock_logger.info.called
            assert mock_print.called

    def test_log_response_error(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print') as mock_print:
            
            log_response(
                chat_id=12345, 
                response_type="TEXT", 
                success=False, 
                error_msg="Test error"
            )
            
            assert mock_logger.info.called
            assert mock_print.called

    def test_log_response_console_output(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞"""
        with patch('utils.logger.logger'), \
             patch('utils.logger.print') as mock_print:
            
            log_response(chat_id=12345, response_type="TEXT", success=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–æ–≤ print —Å —ç–º–æ–¥–∑–∏
            print_calls = mock_print.call_args_list
            assert any("ü§ñ" in str(call) for call in print_calls)

    def test_log_response_error_emoji(self):
        """–¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ"""
        with patch('utils.logger.logger'), \
             patch('utils.logger.print') as mock_print:
            
            log_response(chat_id=12345, response_type="TEXT", success=False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–æ–≤ print —Å —ç–º–æ–¥–∑–∏ –æ—à–∏–±–∫–∏
            print_calls = mock_print.call_args_list
            assert any("‚ùå" in str(call) for call in print_calls)

    def test_log_update_json_basic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è JSON update"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger:
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 123,
                "message": {
                    "message_id": 1,
                    "text": "Hello",
                    "from": {
                        "id": 12345,
                        "username": "testuser",
                        "first_name": "Test"
                    }
                }
            }
            
            log_update_json(update_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–≥–µ—Ä –¥–ª—è updates
            mock_get_logger.assert_called_with("updates")
            assert mock_update_logger.info.called

    def test_log_update_json_text_message(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 123,
                "message": {
                    "message_id": 1,
                    "text": "Hello world",
                    "from": {
                        "id": 12345,
                        "username": "testuser",
                        "first_name": "Test"
                    }
                }
            }
            
            log_update_json(update_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
            assert mock_logger.info.called
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–æ–≤ update –ª–æ–≥–≥–µ—Ä–∞
            assert mock_update_logger.info.called

    def test_log_update_json_voice_message(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 124,
                "message": {
                    "message_id": 2,
                    "voice": {
                        "file_id": "test_voice_id",
                        "duration": 5
                    },
                    "from": {
                        "id": 12345,
                        "username": "testuser",
                        "first_name": "Test"
                    }
                }
            }
            
            log_update_json(update_data)
            
            assert mock_logger.info.called
            assert mock_update_logger.info.called

    def test_log_update_json_callback_query(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è callback query –≤ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 125,
                "callback_query": {
                    "id": "test_callback_id",
                    "from": {
                        "id": 12345,
                        "username": "testuser",
                        "first_name": "Test"
                    },
                    "data": "test_data"
                }
            }
            
            log_update_json(update_data)
            
            assert mock_logger.info.called
            assert mock_update_logger.info.called

    def test_log_update_json_edited_message(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 126,
                "edited_message": {
                    "message_id": 3,
                    "text": "Edited text",
                    "from": {
                        "id": 12345,
                        "username": "testuser",
                        "first_name": "Test"
                    }
                }
            }
            
            log_update_json(update_data)
            
            assert mock_logger.info.called
            assert mock_update_logger.info.called

    def test_log_update_json_unknown_type(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ update –≤ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 127,
                "unknown_field": {
                    "data": "test"
                }
            }
            
            log_update_json(update_data)
            
            assert mock_logger.info.called
            assert mock_update_logger.info.called

    def test_log_update_json_user_info_extraction(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            update_data = {
                "update_id": 128,
                "message": {
                    "message_id": 4,
                    "text": "Test message",
                    "from": {
                        "id": 12345,
                        "first_name": "John",
                        "last_name": "Doe"
                        # –ù–µ—Ç username
                    }
                }
            }
            
            log_update_json(update_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±—ã–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞
            assert mock_logger.info.called
            logged_message = mock_logger.info.call_args[0][0]
            assert "John" in logged_message

    def test_log_update_json_long_text_content(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ JSON"""
        with patch('utils.logger.logging.getLogger') as mock_get_logger, \
             patch('utils.logger.logger') as mock_logger:
            
            mock_update_logger = mock_get_logger.return_value
            
            long_text = "A" * 100  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            update_data = {
                "update_id": 129,
                "message": {
                    "message_id": 5,
                    "text": long_text,
                    "from": {
                        "id": 12345,
                        "username": "testuser",
                        "first_name": "Test"
                    }
                }
            }
            
            log_update_json(update_data)
            
            assert mock_logger.info.called
            logged_message = mock_logger.info.call_args[0][0]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
            assert len(logged_message.split("CONTENT:")[1]) <= 50

    def test_log_message_timestamp_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ –ª–æ–≥–∞—Ö"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print'):
            
            log_message(
                chat_id=12345,
                user_id=67890,
                username="testuser",
                message_type="TEXT",
                content="Hello world",
                message_id=1
            )
            
            logged_message = mock_logger.info.call_args[0][0]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            assert "[" in logged_message and "]" in logged_message

    def test_log_response_timestamp_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ –ª–æ–≥–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        with patch('utils.logger.logger') as mock_logger, \
             patch('utils.logger.print'):
            
            log_response(chat_id=12345, response_type="TEXT", success=True)
            
            logged_message = mock_logger.info.call_args[0][0]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            assert "[" in logged_message and "]" in logged_message

