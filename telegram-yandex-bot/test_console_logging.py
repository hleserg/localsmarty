#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from utils.logger import log_update_json, log_message, log_response, log_info, log_error

class ConsoleLoggingTest:
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.running = False
        
    async def simulate_console_logging(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        print("üñ•Ô∏è –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ö–û–ù–°–û–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        log_info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        log_info("üìù –í—Å–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å —Å —ç–º–æ–¥–∑–∏")
        log_info("üí¨ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞")
        
        self.running = True
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = [
            {
                "type": "startup",
                "message": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            },
            {
                "type": "update",
                "data": {
                    "update_id": 123456789,
                    "message": {
                        "message_id": 1,
                        "from": {
                            "id": 987654321,
                            "is_bot": False,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "language_code": "ru"
                        },
                        "chat": {
                            "id": 123456789,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "type": "private"
                        },
                        "date": 1694567890,
                        "text": "/start"
                    }
                }
            },
            {
                "type": "message",
                "data": {
                    "chat_id": 123456789,
                    "user_id": 987654321,
                    "username": "ivan_petrov",
                    "message_type": "COMMAND",
                    "content": "/start",
                    "message_id": 1
                }
            },
            {
                "type": "response",
                "data": {
                    "chat_id": 123456789,
                    "response_type": "TEXT",
                    "success": True
                }
            },
            {
                "type": "update",
                "data": {
                    "update_id": 123456790,
                    "message": {
                        "message_id": 2,
                        "from": {
                            "id": 987654321,
                            "is_bot": False,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "language_code": "ru"
                        },
                        "chat": {
                            "id": 123456789,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "type": "private"
                        },
                        "date": 1694567895,
                        "text": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ GPT-5"
                    }
                }
            },
            {
                "type": "message",
                "data": {
                    "chat_id": 123456789,
                    "user_id": 987654321,
                    "username": "ivan_petrov",
                    "message_type": "TEXT",
                    "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ GPT-5",
                    "message_id": 2
                }
            },
            {
                "type": "response",
                "data": {
                    "chat_id": 123456789,
                    "response_type": "TEXT",
                    "success": True
                }
            },
            {
                "type": "update",
                "data": {
                    "update_id": 123456791,
                    "message": {
                        "message_id": 3,
                        "from": {
                            "id": 555666777,
                            "is_bot": False,
                            "first_name": "–ê–Ω–Ω–∞",
                            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
                            "username": "anna_sidorova",
                            "language_code": "ru"
                        },
                        "chat": {
                            "id": 555666777,
                            "first_name": "–ê–Ω–Ω–∞",
                            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
                            "username": "anna_sidorova",
                            "type": "private"
                        },
                        "date": 1694567900,
                        "voice": {
                            "duration": 4,
                            "mime_type": "audio/ogg",
                            "file_id": "BAADBAADrwADBREAAYag8VYhAQABAg",
                            "file_unique_id": "AgADBREAAYag8VY",
                            "file_size": 12345
                        }
                    }
                }
            },
            {
                "type": "message",
                "data": {
                    "chat_id": 555666777,
                    "user_id": 555666777,
                    "username": "anna_sidorova",
                    "message_type": "VOICE",
                    "content": "Voice message, duration: 4s, file_id: voice_001",
                    "message_id": 3
                }
            },
            {
                "type": "response",
                "data": {
                    "chat_id": 555666777,
                    "response_type": "TEXT",
                    "success": True
                }
            },
            {
                "type": "error",
                "message": "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
            }
        ]
        
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π:")
        print("-" * 40)
        
        for i, event in enumerate(events, 1):
            if not self.running:
                break
                
            print(f"\nüé¨ –°–æ–±—ã—Ç–∏–µ {i}: {event['type'].upper()}")
            
            if event["type"] == "startup":
                log_info(event["message"])
                
            elif event["type"] == "update":
                log_update_json(event["data"])
                
            elif event["type"] == "message":
                log_message(**event["data"])
                
            elif event["type"] == "response":
                log_response(**event["data"])
                
            elif event["type"] == "error":
                log_error(event["message"])
            
            await asyncio.sleep(0.5)
        
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê –ö–û–ù–°–û–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"üì® –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        print(f"üîÑ Updates: {sum(1 for e in events if e['type'] == 'update')}")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: {sum(1 for e in events if e['type'] == 'message')}")
        print(f"ü§ñ –û—Ç–≤–µ—Ç—ã: {sum(1 for e in events if e['type'] == 'response')}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {sum(1 for e in events if e['type'] == 'error')}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {sum(1 for e in events if e['type'] == 'response' and e['data']['success'])}")
        
        print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–æ–≤:")
        print("   üìÑ logs/updates.json - –ø–æ–ª–Ω—ã–µ JSON updates")
        print("   üìÑ logs/messages.log - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("   üìÑ logs/combined.log - –æ–±—â–∏–µ –ª–æ–≥–∏")
        print("   üìÑ logs/error.log - –æ—à–∏–±–∫–∏")
        print("   üñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —ç–º–æ–¥–∑–∏")
        
        print("\n‚ú® –¢–µ—Å—Ç –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üí° –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å —Å —ç–º–æ–¥–∑–∏!")
        print("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã!")
        print("üñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —É–ª—É—á—à–µ–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üìù –í—Å–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å —Å —ç–º–æ–¥–∑–∏")
    print("üí¨ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞")
    print("üìÅ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª—ã")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    test = ConsoleLoggingTest()
    
    try:
        await test.simulate_console_logging()
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
