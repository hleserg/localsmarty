#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import asyncio
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from utils.logger import log_info, log_error

class WebhookDemo:
    """–î–µ–º–æ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self):
        self.running = False
        
    async def simulate_webhook_requests(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        log_info("üåê –î–µ–º–æ webhook —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–æ!")
        log_info("üì° –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö webhook –∑–∞–ø—Ä–æ—Å–æ–≤")
        log_info("üí¨ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ updates")
        
        self.running = True
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ webhook –∑–∞–ø—Ä–æ—Å—ã
        webhook_requests = [
            {
                "name": "–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "data": {
                    "update_id": 123456789,
                    "message": {
                        "message_id": 1,
                        "from": {
                            "id": 987654321,
                            "is_bot": False,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "language_code": "ru"
                        },
                        "chat": {
                            "id": 123456789,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "type": "private"
                        },
                        "date": 1694567890,
                        "text": "/start"
                    }
                }
            },
            {
                "name": "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "data": {
                    "update_id": 123456790,
                    "message": {
                        "message_id": 2,
                        "from": {
                            "id": 987654321,
                            "is_bot": False,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "language_code": "ru"
                        },
                        "chat": {
                            "id": 123456789,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "type": "private"
                        },
                        "date": 1694567895,
                        "text": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ GPT-5"
                    }
                }
            },
            {
                "name": "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "data": {
                    "update_id": 123456791,
                    "message": {
                        "message_id": 3,
                        "from": {
                            "id": 555666777,
                            "is_bot": False,
                            "first_name": "–ê–Ω–Ω–∞",
                            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
                            "username": "anna_sidorova",
                            "language_code": "ru"
                        },
                        "chat": {
                            "id": 555666777,
                            "first_name": "–ê–Ω–Ω–∞",
                            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
                            "username": "anna_sidorova",
                            "type": "private"
                        },
                        "date": 1694567900,
                        "voice": {
                            "duration": 4,
                            "mime_type": "audio/ogg",
                            "file_id": "BAADBAADrwADBREAAYag8VYhAQABAg",
                            "file_unique_id": "AgADBREAAYag8VY",
                            "file_size": 12345
                        }
                    }
                }
            },
            {
                "name": "Callback Query",
                "data": {
                    "update_id": 123456792,
                    "callback_query": {
                        "id": "1234567890123456789",
                        "from": {
                            "id": 987654321,
                            "is_bot": False,
                            "first_name": "–ò–≤–∞–Ω",
                            "last_name": "–ü–µ—Ç—Ä–æ–≤",
                            "username": "ivan_petrov",
                            "language_code": "ru"
                        },
                        "message": {
                            "message_id": 4,
                            "from": {
                                "id": 8001242722,
                                "is_bot": True,
                                "first_name": "Test Bot",
                                "username": "test_bot"
                            },
                            "chat": {
                                "id": 123456789,
                                "first_name": "–ò–≤–∞–Ω",
                                "last_name": "–ü–µ—Ç—Ä–æ–≤",
                                "username": "ivan_petrov",
                                "type": "private"
                            },
                            "date": 1694567915,
                            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            "reply_markup": {
                                "inline_keyboard": [
                                    [
                                        {
                                            "text": "–ö–Ω–æ–ø–∫–∞ 1",
                                            "callback_data": "button_1"
                                        },
                                        {
                                            "text": "–ö–Ω–æ–ø–∫–∞ 2",
                                            "callback_data": "button_2"
                                        }
                                    ]
                                ]
                            }
                        },
                        "chat_instance": "1234567890123456789",
                        "data": "button_1"
                    }
                }
            }
        ]
        
        print("\n" + "="*80)
        print("üåê –î–ï–ú–û WEBHOOK –°–ï–†–í–ï–†–ê - –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ü–†–û–°–û–í")
        print("="*80)
        
        total_requests = 0
        
        for i, request in enumerate(webhook_requests, 1):
            if not self.running:
                break
                
            total_requests += 1
            
            print(f"\nüì° Webhook –∑–∞–ø—Ä–æ—Å {i}: {request['name']}")
            print("-" * 50)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ webhook –∑–∞–ø—Ä–æ—Å–∞
            data_size = len(json.dumps(request['data']))
            print(f"üì• –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å: {data_size} –±–∞–π—Ç")
            print(f"üÜî Update ID: {request['data']['update_id']}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update
            if 'message' in request['data']:
                if 'text' in request['data']['message']:
                    print(f"üí¨ –¢–∏–ø: TEXT —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    print(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {request['data']['message']['text'][:50]}...")
                elif 'voice' in request['data']['message']:
                    print(f"üé§ –¢–∏–ø: VOICE —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {request['data']['message']['voice']['duration']}—Å")
                else:
                    print(f"üìé –¢–∏–ø: –î—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            elif 'callback_query' in request['data']:
                print(f"üîò –¢–∏–ø: CALLBACK QUERY")
                print(f"üìù –î–∞–Ω–Ω—ã–µ: {request['data']['callback_query']['data']}")
            else:
                print(f"‚ùì –¢–∏–ø: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π update")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = "Unknown"
            if 'message' in request['data']:
                from_user = request['data']['message'].get('from', {})
                username = from_user.get('username')
                first_name = from_user.get('first_name', "")
                if username:
                    user_info = f"@{username}"
                elif first_name:
                    user_info = first_name
            elif 'callback_query' in request['data']:
                from_user = request['data']['callback_query'].get('from', {})
                username = from_user.get('username')
                first_name = from_user.get('first_name', "")
                if username:
                    user_info = f"@{username}"
                elif first_name:
                    user_info = first_name
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update...")
            await asyncio.sleep(0.3)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print(f"‚úÖ Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: OK (200)")
            
            await asyncio.sleep(0.5)
        
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û WEBHOOK –°–ï–†–í–ï–†–ê")
        print("="*80)
        print(f"üì° –í—Å–µ–≥–æ webhook –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(1 for r in webhook_requests if 'message' in r['data'] and 'text' in r['data']['message'])}")
        print(f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(1 for r in webhook_requests if 'message' in r['data'] and 'voice' in r['data']['message'])}")
        print(f"üîò Callback queries: {sum(1 for r in webhook_requests if 'callback_query' in r['data'])}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_requests}")
        print(f"‚ùå –û—à–∏–±–æ–∫: 0")
        
        print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞:")
        print("   üåê Webhook endpoint: /webhook")
        print("   ‚ù§Ô∏è Health check: /health")
        print("   üîí SSL –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞")
        print("   üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–ª–Ω–æ–µ")
        
        print("\nüöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ webhook —Ä–µ–∂–∏–º–∞:")
        print("   ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ updates")
        print("   üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        print("   üìä –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å")
        print("   üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        print("   üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        print("\n‚ú® –î–µ–º–æ webhook —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üí° Webhook —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!")
        print("üê≥ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
        print("üîê SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ó–∞–ø—É—Å–∫ –¥–µ–º–æ webhook —Å–µ—Ä–≤–µ—Ä–∞")
    print("üì° –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö webhook –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("üí¨ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ updates")
    print("üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    demo = WebhookDemo()
    
    try:
        await demo.simulate_webhook_requests()
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
